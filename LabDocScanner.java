/**
 * 
 * Controller class that instantiates a new DoOCR object on the current image file and processes the 
 *  output generated by Tesseract
 *
 * This class currently is designed with regex that only works with labs received from Quest VA
 * In order to enable other lab sources, code here (particularly regex functions) will need to
 * 	be refactored in addition to the creation of subclasses for each lab source
 * 
 * Controller class to LabDocData, invoking that class when data is matched via regex and storing it in a HashMap
 * LabDocData objects are thereafter mapped to their parent LabDocSection classes, which are instantiated upon
 *  identification of a LabDocData object child to them
 *
 * Eventually, this class will be refactored into component regex classes.
 *
 */

package labBot;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LabDocScanner {

	protected ArrayList<String> ocrResults = new ArrayList<String>();
	protected ArrayList<String> matchResults = new ArrayList<String>();
	public String firstName, lastName, dataSourceType;
	public static final File source = new File("E:/CHSEE/QUESTVA_fake_AgAb.txt");
	protected static HashMap<String,LabDocData> dataInDoc = new HashMap<String,LabDocData>();
	protected static HashMap<String,LabDocSection> sectionsInDoc = new HashMap<String,LabDocSection>();
	
	public static void main(String[] args) {
		new LabDocScanner();

	}
 	
	public LabDocScanner() {
		// TODO Auto-generated constructor stub
		
		//DoOCR labDoc = new DoOCR();
		//this.ocrResults = labDoc.getOCRResults();
		try {
			Scanner fileReader = new Scanner(source);
			while (fileReader.hasNext()) {
				ocrResults.add(fileReader.nextLine());
			}
			fileReader.close();
		} catch (FileNotFoundException e) {
			System.out.println("File not found!");
		}
		
		/*for (String line : ocrResults) {
			Pattern identifyQva = Pattern.compile(QVaRegexPatterns.questVaIdentifier);
			Matcher m = identifyQva.matcher(line);
			if (m.find()) {
				doRegex(ocrResults.get(10), QVaRegexPatterns.orderingFacilityLine);
				doRegex(ocrResults.get(12), QVaRegexPatterns.caseNameLine);
				doRegex(ocrResults.get(13), QVaRegexPatterns.dobLine);
				doRegex(ocrResults.get(14), QVaRegexPatterns.streetAddressLine);
				doRegex(ocrResults.get(15), QVaRegexPatterns.cityStateZipLine);
			}
		}*/
		
		
		//System.out.println(ocrResults.get(13));
		//doRegex(ocrResults.get(13), QVaRegexPatterns.dobLine);
		//System.out.println(firstName);
		//System.out.println(matchResults.get(2));
		
		//iterateOverOcrResults(ocrResults);
		//FormInfo.mapFormInfoSection(sectionsInDoc);
	}

	/*public void iterateOverOcrResults (ArrayList<String> ocrResults) {
		for (String line : ocrResults) {
			doRegex(line);
			if (firstName != null && !firstName.isEmpty()) {

				LabDocData.createLabDocData(dataInDoc, dataSourceType, firstName);
				
				
			}
			
			if (lastName != null && !lastName.isEmpty()) {

				LabDocData.createLabDocData(dataInDoc, dataSourceType, lastName);
				
			}
			
		}
	}*/
	
	protected LabDocData getDataFromHashMap(String dataSourceType) {
		return dataInDoc.get(dataSourceType);
	}
	
	protected LabDocSection getLabDocSectionByName(String name) {
		return sectionsInDoc.get(name);
	}
	
	protected boolean doRegex(String line, String pattern) {
		Pattern name = Pattern.compile(pattern);
		Matcher matches = name.matcher(line);
		//System.out.println(line);
		matchResults.clear();
		if (matches.find()) {
			for (int i=1; i<=matches.groupCount(); i++) {
					matchResults.add(matches.group(i));
			}
			return true;
		} else {
			return false;
		}	
	}
	
}
