/**
 * 
 * Controller class that instantiates a new DoOCR object on the current image file and processes the 
 *  output generated by Tesseract
 *
 * This class currently is designed with regex that only works with labs received from Quest VA
 * In order to enable other lab sources, code here (particularly regex functions) will need to
 * 	be refactored in addition to the creation of subclasses for each lab source
 * 
 * Controller class to LabDocData, invoking that class when data is matched via regex and storing it in a HashMap
 * LabDocData objects are thereafter mapped to their parent LabDocSection classes, which are instantiated upon
 *  identification of a LabDocData object child to them
 *
 * Eventually, this class will be refactored into component regex classes.
 *
 */

package labBot;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LabDocScanner {
	
	private ArrayList<String> ocrResults = new ArrayList<String>();
	private String firstName, lastName, dataSourceType;
	
	protected static HashMap<String,LabDocData> dataInDoc = new HashMap<String,LabDocData>();
	protected static HashMap<String,LabDocSection> sectionsInDoc = new HashMap<String,LabDocSection>();
	
	public String path = new String("path-to-image");
	
	public LabDocScanner() {
		// TODO Auto-generated constructor stub
		DoOCR labDoc = new DoOCR(path);
		this.ocrResults = labDoc.getOCRResults();
		iterateOverOcrResults(ocrResults);
	}

	private void iterateOverOcrResults (ArrayList<String> ocrResults) {
		for (String line : ocrResults) {
			doCaseNameRegex(line);
			if (firstName != null && !firstName.isEmpty()) {

				LabDocData.createLabDocData(dataInDoc, dataSourceType, firstName);
				FormInfo.mapFormInfoSection(sectionsInDoc);
				
			}
			
			if (lastName != null && !lastName.isEmpty()) {

				LabDocData.createLabDocData(dataInDoc, dataSourceType, lastName);
				
			}
			
		}
	}
	
	protected LabDocData getDataFromHashMap(String dataSourceType) {
		return dataInDoc.get(dataSourceType);
	}
	
	protected LabDocSection getLabDocSectionByName(String name) {
		return sectionsInDoc.get(name);
	}
	
	
	private void doCaseNameRegex(String line) {
		Pattern regexFirstName = Pattern.compile("[A-Z], ([A-Z])");
		Matcher matchFirstNames = regexFirstName.matcher(line);
		String firstName =  matchFirstNames.group(2);
		String dataSourceType = "firstName";
		this.firstName = firstName;
		this.dataSourceType = dataSourceType;
		
		
		Pattern regexLastName = Pattern.compile("([A-Z]), [A-Z]");
		Matcher matchLastNames = regexLastName.matcher(line);
		String lastName =  matchLastNames.group(2);
		this.lastName = lastName;
	}
	
	/*private LabDocData newLabDocData(String regexMatch, String regexReflection) {
		if (regexMatch != null && !regexMatch.isEmpty()) {
			for (Field field : regexMatch.getClass().getFields()) {
				regexReflection = field.getName();
			}
			LabDocData newData = new LabDocData(regexReflection);
			newData.setDataSourceType(newData);
			return newData;
		}
	}*/
	
}
